# Copyright 2025 NVIDIA Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  PYTHONPATH: ${{ github.workspace }}

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: self-hosted
    env:
      CUDA_VISIBLE_DEVICES: all
    container:
      image: nvidia/cuda:12.6.0-runtime-ubuntu22.04
      options: --privileged --gpus all
    services:
      - name: docker
        image: nvidia/dind:cuda-12.6.0
        options: --privileged
        with:
          healthcheck: |
            until docker info; do
              sleep 1
            done
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate workflow syntax
        uses: rhysd/actionlint@v1

      - name: Wait for Docker
        run: |
          timeout 120s bash -c 'until docker info; do
            sleep 10
          done'

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: precommit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            --no-install-recommends \
            git python3-pip python3-venv
          python3 -m pip install --upgrade pip
          python3 -m pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files
    timeout-minutes: 60

  unit-tests:
    name: Unit Tests
    needs: pre-commit
    runs-on: self-hosted
    env:
      CUDA_VISIBLE_DEVICES: all
    container:
      image: nvidia/cuda:12.6.0-runtime-ubuntu22.04
      options: --privileged --gpus all
    services:
      - name: docker
        image: nvidia/dind:cuda-12.6.0
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Docker
        run: |
          timeout 120s bash -c 'until docker info; do
            sleep 10
          done'

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            venv/
          key: unit-tests-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            --no-install-recommends \
            python3-pip python3-venv \
            libgl1-mesa-glx libglib2.0-0
          python3 -m pip install --upgrade pip
          python3 -m pip install -e .[test]

      - name: Run unit tests
        run: |
          mkdir -p test-results
          pytest \
            --junitxml=test-results/unit-tests.xml \
            --cov=. \
            --cov-report=xml:test-results/coverage.xml \
            --cov-report=term-missing \
            tests/unit

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 7

  e2e-tests:
    name: End-to-End Tests
    needs: unit-tests
    runs-on: self-hosted
    env:
      CUDA_VISIBLE_DEVICES: all
    container:
      image: nvidia/cuda:12.6.0-runtime-ubuntu22.04
      options: --privileged --gpus all
    services:
      - name: docker
        image: nvidia/dind:cuda-12.6.0
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Docker
        run: |
          timeout 120s bash -c 'until docker info; do
            sleep 10
          done'

      - name: Install dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            --no-install-recommends \
            python3-pip python3-venv \
            libgl1-mesa-glx libglib2.0-0
          python3 -m pip install --upgrade pip
          python3 -m pip install -e .

      - name: Run E2E tests
        run: |
          mkdir -p test-results
          python3 scripts/generate_graph.py \
            --map-path maps/carter_warehouse_navigation.png \
            --graph-eval.active \
            --perf-eval.active
          python3 scripts/evaluate_graph.py \
            --map-path maps/carter_warehouse_navigation.png \
            --output-dir results \
            --resolution 0.05 \
            --safety-distance 0.3 \
            --occupancy-threshold 127

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: |
            test-results/
            results/
            graphs/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: rm -rf results graphs test-results

  docker-build:
    name: Docker Build and Test
    needs: e2e-tests
    runs-on: self-hosted
    env:
      CUDA_VISIBLE_DEVICES: all
    container:
      image: nvidia/cuda:12.6.0-runtime-ubuntu22.04
      options: --privileged --gpus all
    services:
      - name: docker
        image: nvidia/dind:cuda-12.6.0
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Docker
        run: |
          timeout 120s bash -c 'until docker info; do
            sleep 10
          done'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build and test
        run: |
          cd docker || { echo "Missing docker directory"; exit 1; }
          docker compose build --no-cache
          docker compose up -d rest-api
          sleep 15  # Wait for service initialization
          docker ps -a
          pytest ../tests/integration/test_api.py -v

      - name: Cleanup
        if: always()
        run: |
          cd docker && docker compose down -v
