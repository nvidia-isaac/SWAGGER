# Copyright 2025 NVIDIA Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for CI/CD infrastructure'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - staging
    Description: Environment name for resource naming

  ProjectName:
    Type: String
    Default: projectName
    Description: Name of the project (used in resource naming)

  GitHubRepoPath:
    Type: String
    Description: Full GitHub repository path (e.g., 'microsoft/vscode' or 'octocat/Hello-World'). For organization runners, use the organization name.
    AllowedPattern: ^[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$|^[a-zA-Z0-9-]+$

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the public subnet

  GitHubToken:
    Type: String
    Description: GitHub personal access token with 'repo' and 'workflow' scopes. For organization runners, requires 'admin:org' scope.
    NoEcho: true

  RunnerCount:
    Type: Number
    Description: Number of GitHub Actions runners to create
    Default: 1
    MinValue: 1
    MaxValue: 10

  InstanceType:
    Type: String
    Description: EC2 instance type for runners
    Default: g4dn.xlarge
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g5.xlargexr  bv
      - g5.2xlarge
      - g5.4xlarge

  LogRetentionDays:
    Type: Number
    Description: Number of days to retain logs
    Default: 90
    MinValue: 1
    MaxValue: 3653

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Resources:
  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${ProjectName}-vpc
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${ProjectName}-igw
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${ProjectName}-public-subnet
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${ProjectName}-rt
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  Route:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # Security Group
  BuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-${ProjectName}-build-sg
      GroupDescription: Security group for build instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: Allow SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${ProjectName}-build-sg
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  # IAM Role for EC2 instances
  RunnerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-${ProjectName}-runner-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  RunnerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RunnerRole
      InstanceProfileName: !Sub ${Environment}-${ProjectName}-runner-profile

  # Launch Template for runners
  RunnerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Environment}-${ProjectName}-runner-template
      LaunchTemplateData:
        ImageId: ami-0eabc4ddf08279fc3  # Ubuntu 22.04 LTS
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref PublicSubnet
            Groups:
              - !Ref BuildSecurityGroup
        IamInstanceProfile:
          Name: !Ref RunnerInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 100
              VolumeType: gp3
              DeleteOnTermination: true
          - DeviceName: /dev/xvdf
            Ebs:
              VolumeSize: 1024
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
              Iops: 3000
              Throughput: 125
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${Environment}-${ProjectName}-runner
              - Key: Environment
                Value: !Ref Environment
              - Key: Project
                Value: !Ref ProjectName
              - Key: ManagedBy
                Value: CloudFormation
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            
            # Wait for apt lock to be released
            while fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
              echo "Waiting for other package manager to finish..."
              sleep 1
            done
            
            # Install Docker
            apt-get update
            apt-get install -y ca-certificates curl gnupg
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # Wait for apt lock again before updating
            while fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
              echo "Waiting for other package manager to finish..."
              sleep 1
            done
            
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            # Debug information
            echo "=== Debug Information ==="
            lsblk
            echo "=== Mount Points ==="
            mount
            echo "=== FSTAB ==="
            cat /etc/fstab
            
            # Wait for EBS volume to be available and find the correct device
            echo "Waiting for EBS volume to be attached..."
            while true; do
              # Check for NVMe devices
              if [ -e /dev/nvme1n1 ]; then
                EBS_DEVICE="/dev/nvme1n1"
                break
              elif [ -e /dev/nvme0n1 ]; then
                EBS_DEVICE="/dev/nvme0n1"
                break
              fi
              echo "Waiting for EBS volume..."
              sleep 5
            done
            
            echo "Found EBS volume at $EBS_DEVICE"
            
            # Wait for the volume to be ready
            sleep 10
            
            # Check if the volume is already formatted
            if ! blkid $EBS_DEVICE; then
              echo "Formatting EBS volume..."
              mkfs -t ext4 $EBS_DEVICE
            fi
            
            # Create mount point and add to fstab
            mkdir -p /var/lib/docker-cache
            
            # Remove any existing mount entry for this device
            sed -i '/\/var\/lib\/docker-cache/d' /etc/fstab
            
            # Add new mount entry
            echo "$EBS_DEVICE /var/lib/docker-cache ext4 defaults,nofail 0 2" >> /etc/fstab
            
            # Unmount if already mounted
            umount /var/lib/docker-cache 2>/dev/null || true
            
            # Mount the volume
            mount -a
            
            # Verify mount
            echo "=== After Mount ==="
            mount | grep docker-cache
            df -h /var/lib/docker-cache
            
            # Configure Docker to use the mounted volume for cache
            mkdir -p /etc/docker
            cat > /etc/docker/daemon.json << EOF
            {
              "data-root": "/var/lib/docker-cache",
              "storage-driver": "overlay2",
              "log-driver": "json-file",
              "log-opts": {
                "max-size": "100m",
                "max-file": "3"
              }
            }
            EOF
            
            # Stop Docker before moving data
            systemctl stop docker
            
            # Move existing Docker data if it exists
            if [ -d "/var/lib/docker" ] && [ "$(ls -A /var/lib/docker)" ]; then
              echo "Moving existing Docker data..."
              mv /var/lib/docker/* /var/lib/docker-cache/ 2>/dev/null || true
            fi
            
            # Restart Docker to apply new configuration
            systemctl start docker
            
            # Create Docker cache cleanup script
            cat > /usr/local/bin/cleanup-docker-cache.sh << 'EOF'
            #!/bin/bash
            
            # Set threshold (in percentage) for cleanup
            THRESHOLD=80
            
            # Get current disk usage
            USAGE=$(df -h /var/lib/docker-cache | awk 'NR==2 {print $5}' | sed 's/%//')
            
            if [ "$USAGE" -gt "$THRESHOLD" ]; then
              echo "Docker cache usage is at $USAGE%, cleaning up..."
              
              # Remove unused containers
              docker container prune -f
              
              # Remove unused images
              docker image prune -a -f
              
              # Remove unused volumes
              docker volume prune -f
              
              # Remove build cache
              docker builder prune -f
              
              echo "Cleanup completed"
            else
              echo "Docker cache usage is at $USAGE%, no cleanup needed"
            fi
            EOF
            
            chmod +x /usr/local/bin/cleanup-docker-cache.sh
            
            # Add cleanup script to crontab
            (crontab -l 2>/dev/null; echo "0 */4 * * * /usr/local/bin/cleanup-docker-cache.sh") | crontab -
            
            # Wait for apt lock before installing jq
            while fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
              echo "Waiting for other package manager to finish..."
              sleep 1
            done
            
            # Install jq for JSON parsing
            apt-get install -y jq
            
            # Install GitHub Actions runner
            mkdir -p /opt/github-runner
            cd /opt/github-runner
            curl -o actions-runner-linux-x64-2.323.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.323.0/actions-runner-linux-x64-2.323.0.tar.gz
            echo "0dbc9bf5a58620fc52cb6cc0448abcca964a8d74b5f39773b7afcad9ab691e19  actions-runner-linux-x64-2.323.0.tar.gz" | shasum -a 256 -c
            tar xzf ./actions-runner-linux-x64-2.323.0.tar.gz
            
            # Create runner user
            useradd -m -s /bin/bash github-runner
            
            # Set ownership of runner directory
            chown -R github-runner:github-runner /opt/github-runner

            # Create systemd service for GitHub runner
            cat > /etc/systemd/system/github-runner.service << EOF
            [Unit]
            Description=GitHub Actions Runner
            After=network.target docker.service
            
            [Service]
            Type=simple
            User=github-runner
            WorkingDirectory=/opt/github-runner
            ExecStart=/opt/github-runner/run.sh
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Configure the runner as non-root user using the registration token
            su - github-runner -c "cd /opt/github-runner && ./config.sh --url https://github.com/${GitHubRepoPath} --token \$(curl -s -X POST \
              -H \"Accept: application/vnd.github+json\" \
              -H \"Authorization: Bearer ${GitHubToken}\" \
              -H \"X-GitHub-Api-Version: 2022-11-28\" \
              \"https://api.github.com/repos/${GitHubRepoPath}/actions/runners/registration-token\" | jq -r '.token') --labels self-hosted,gpu --unattended --ephemeral"
            
            # Enable and start the service
            systemctl daemon-reload
            systemctl enable github-runner
            systemctl start github-runner

  # Auto Scaling Group for runners
  RunnerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${Environment}-${ProjectName}-runners
      LaunchTemplate:
        LaunchTemplateId: !Ref RunnerLaunchTemplate
        Version: !GetAtt RunnerLaunchTemplate.LatestVersionNumber
      MinSize: !Ref RunnerCount
      MaxSize: !Ref RunnerCount
      DesiredCapacity: !Ref RunnerCount
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${ProjectName}-runner
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectName
          PropagateAtLaunch: true
        - Key: ManagedBy
          Value: CloudFormation
          PropagateAtLaunch: true

Outputs:
  VpcId:
    Description: ID of the VPC
    Value: !Ref VPC

  PublicSubnetId:
    Description: ID of the public subnet
    Value: !Ref PublicSubnet

  SecurityGroupId:
    Description: ID of the build security group
    Value: !Ref BuildSecurityGroup

  RunnerRoleArn:
    Description: ARN of the runner IAM role
    Value: !GetAtt RunnerRole.Arn

  RunnerAutoScalingGroupName:
    Description: Name of the runner Auto Scaling Group
    Value: !Ref RunnerAutoScalingGroup 